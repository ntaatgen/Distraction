if (numPlots==1) {#
print(plots[[1]])#
#
} else {#
# Set up the page#
grid.newpage()#
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
# Make each plot, in the correct location#
for (i in 1:numPlots) {#
# Get the i,j matrix positions of the regions that contain this subplot#
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
layout.pos.col = matchidx$col))#
}#
}#
}#
dat <- read.table("CWM-emotion-drh.dat", as.is=T)#
names(dat) <- c("Run","Task","Label","Trial","Time","Event","Par1","Par2","Par3","Inp1","Inp2","Inp3","Inp4","Inp5")#
se <- function(x) sd(x)/sqrt(length(x))#
library(Hmisc)#
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Label != "training" & dat$Par1 == "press",]#
#
dat2 <- dat2[,c(1,4,8,11,12,13)]#
#
names(dat2) <- c("run","trial","response","condition","span","position")#
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)#
#
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))#
dat3 <- aggregate(correct ~ run * condition * span, data = dat2, mean)#
dat3c <- aggregate(correct ~ run * condition * span, data = dat2, length)#
dat3c$correct <- dat3c$correct / dat3c$span#
dat3c#
dat4 <- aggregate(correct ~ condition * span, data = dat3, mean)#
dat4err <- aggregate(correct ~ condition * span, data = dat3, se)#
names(dat4err) <- c("condition","span","se")#
dat4 <- merge(dat4,dat4err)#
dat13 <- aggregate(correct ~ run * condition * span * position, data = dat2[dat2$correct==1,], length)#
dat13$correct <- dat13$correct / 20#
dat14 <- aggregate(correct ~ condition * span * position, data = dat13, mean)#
#
dat14err <- aggregate(correct ~ condition * span * position, data = dat13, se)#
names(dat14err) <- c("condition","span","position","se")#
dat14 <- merge(dat14,dat14err)#
#
expdata <- read.table("CWM-dataExp2.txt",header=T)#
d <- expdata#
#
d$source <- "data"#
dat4$se <- 0.0#
dat4$source <- "model"#
#
dat4 <- rbind(dat4,d)#
#
# accuracy by serial position#
# data is in d2, model is in dat14#
#
data2 <- read.table("CWM-dataExp2pos.txt",header=T)#
data2$source <- "data"#
dat14$source <- "model"#
data2 <- rbind(data2,dat14)#
#
linesize = 0.8#
pointsize = 2.8#
p1 <- ggplot(dat4, aes(x = span, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) + #
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),#
axis.text=element_text(size=9),#
title=element_text(size=9,face="bold"),#
legend.text=element_text(size=9), #
legend.key.size=unit(0.7,"cm")) + #
scale_linetype_manual(values=c("solid","dotted")) +#
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +#
scale_color_manual(values=c("blue","red")) +#
ylab("Partial-credit score") +#
xlab("Span") +#
ylim(c(0.75,0.96))#
p2 <- ggplot(data2[data2$span==3,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) + #
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),#
axis.text=element_text(size=9),#
title=element_text(size=9,face="bold"),#
legend.text=element_text(size=9), #
legend.key.size=unit(0.7,"cm")) + #
scale_linetype_manual(values=c("solid","dotted")) +#
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +#
scale_color_manual(values=c("blue","red")) +#
ylab("Partial-credit score") +#
xlab("Serial Position") +#
ylim(c(0.70,1.0))#
p3 <- ggplot(data2[data2$span==4,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) + #
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),#
axis.text=element_text(size=9),#
title=element_text(size=9,face="bold"),#
legend.text=element_text(size=9), #
legend.key.size=unit(0.7,"cm")) + #
scale_linetype_manual(values=c("solid","dotted")) +#
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +#
#
scale_color_manual(values=c("blue","red")) +#
ylab("Partial-credit score") +#
xlab("Serial Position") +#
ylim(c(0.70,1.0))#
#
p4 <- ggplot(data2[data2$span==5,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) + #
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),#
axis.text=element_text(size=9),#
title=element_text(size=9,face="bold"),#
legend.text=element_text(size=9), #
legend.key.size=unit(0.7,"cm")) + #
scale_linetype_manual(values=c("solid","dotted")) +#
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +#
#
scale_color_manual(values=c("blue","red")) +#
ylab("Partial-credit score") +#
xlab("Serial Position") +#
ylim(c(0.60,1.0))#
#
multiplot(p1,p2,p3,p4,cols=2)#
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Par1 == "press",]#
dat2$Trial <- ifelse(dat2$Label == "training", dat2$Trial - 10, dat2$Trial)#
dat2 <- dat2[,c(1,4,8,11,12,13)]#
#
names(dat2) <- c("run","trial","response","condition","span","position")#
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)#
#
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))#
dat20 <- aggregate(correct ~ trial * condition, data = dat2, mean)#
m20 <- with(dat20,tapply(correct,list(condition,trial),mean))#
#
quartz()#
ggplot(dat20[dat20$trial>-2 & dat20$trial < 11,], aes(x = trial + 2, y = correct, group = condition, color=condition)) +    geom_line(size = 1) + #
geom_point(colour="black")  +#
scale_x_continuous(breaks = (1:6)*2) +#
scale_color_manual(values=c("blue","red")) +#
ylab("Partial-credit score") +#
xlab("Block") +#
ylim(0.79,0.95)#
# Thought probes#
#
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Label != "training" & dat$Par1 == "press",]#
#
dat2 <- dat2[,c(1,4,8,11,12,13)]#
#
names(dat2) <- c("run","trial","response","condition","span","position")#
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)#
#
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))#
#
dat3 <- aggregate(correct ~ run * condition * span * trial, data = dat2, mean)#
#
datx <- dat[dat$Label != "training",]#
#
datx <- dat[dat$Label == "test" & (dat$Par1 == "subvocalize" | dat$Par1 == "wander" | dat$Event == "trial-end" | dat$Event == "trial-start"),]#
names(datx) = c("run","task","Label","trial","time","event","Par1","Par2","Par3","Inp1","condition","span","Inp4","Inp5")#
datx$prevEvent <- c("none",datx$Par1[1:length(datx$Par1)-1])#
datx <- datx[datx$event=="trial-end",]#
datxy <- merge(datx,dat3)#
datxy$ontask <- ifelse(datxy$prevEvent != "wander", 1, 0)#
#
ontask.by.condition.run <- aggregate(ontask ~ condition * run, data = datxy, FUN = mean)#
ontask.by.condition <- aggregate(ontask ~ condition, data = ontask.by.condition.run, FUN = mean)#
#
correct.by.ontask.run <- aggregate(correct ~ ontask * run, data = datxy, FUN = mean)#
correct.by.ontask <- aggregate(correct ~ ontask , data = correct.by.ontask.run, FUN = mean)
ontask.by.condition
correct.by.task
correct.by.ontask
dat[1:50,]
datx[1:50,]
datx <- dat[dat$Label != "training",]#
#
datx <- dat[dat$Label == "test" & (dat$Par1 == "subvocalize" | dat$Par1 == "wander" | dat$Event == "trial-end" | dat$Event == "trial-start"),]#
names(datx) = c("run","task","Label","trial","time","event","Par1","Par2","Par3","Inp1","condition","span","Inp4","Inp5")#
datx$prevEvent <- c("none",datx$Par1[1:length(datx$Par1)-1])
datx[1:50,]
datx <- dat[dat$Label != "training",]#
#
datx <- dat[dat$Label == "test" & (dat$Par1 == "subvocalize" | dat$Par1 == "wander" | dat$Event == "trial-end" | dat$Event == "trial-start"),]#
names(datx) = c("run","task","Label","trial","time","event","Par1","Par2","Par3","Inp1","condition","span","Inp4","Inp5")#
datx$prevEvent <- c("none",datx$Par1[1:length(datx$Par1)-1])#
datx$prevprevEvent <- c("none",datx$Par1[1:length(datx$prevEvent)-1])#
#
datx <- datx[datx$event=="trial-end",]#
datxy <- merge(datx,dat3)#
datxy$ontask <- ifelse(datxy$prevEvent != "wander" | datxy$prevprevEvent != "wander", 1, 0)#
#
ontask.by.condition.run <- aggregate(ontask ~ condition * run, data = datxy, FUN = mean)#
ontask.by.condition <- aggregate(ontask ~ condition, data = ontask.by.condition.run, FUN = mean)#
#
correct.by.ontask.run <- aggregate(correct ~ ontask * run, data = datxy, FUN = mean)#
correct.by.ontask <- aggregate(correct ~ ontask , data = correct.by.ontask.run, FUN = mean)
ontask.by.condition
correct.by.ontask
library(ggplot2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
dat <- read.table("CWM-emotion-drh.dat", as.is=T)
names(dat) <- c("Run","Task","Label","Trial","Time","Event","Par1","Par2","Par3","Inp1","Inp2","Inp3","Inp4","Inp5")
se <- function(x) sd(x)/sqrt(length(x))
library(Hmisc)
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Label != "training" & dat$Par1 == "press",]
dat2 <- dat2[,c(1,4,8,11,12,13)]
names(dat2) <- c("run","trial","response","condition","span","position")
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))
dat3 <- aggregate(correct ~ run * condition * span, data = dat2, mean)
dat3c <- aggregate(correct ~ run * condition * span, data = dat2, length)
dat3c$correct <- dat3c$correct / dat3c$span
dat3c
dat4 <- aggregate(correct ~ condition * span, data = dat3, mean)
dat4err <- aggregate(correct ~ condition * span, data = dat3, se)
names(dat4err) <- c("condition","span","se")
dat4 <- merge(dat4,dat4err)
dat13 <- aggregate(correct ~ run * condition * span * position, data = dat2[dat2$correct==1,], length)
dat13$correct <- dat13$correct / 20
dat14 <- aggregate(correct ~ condition * span * position, data = dat13, mean)
dat14err <- aggregate(correct ~ condition * span * position, data = dat13, se)
names(dat14err) <- c("condition","span","position","se")
dat14 <- merge(dat14,dat14err)
expdata <- read.table("CWM-dataExp2.txt",header=T)
d <- expdata
d$source <- "data"
dat4$se <- 0.0
dat4$source <- "model"
dat4 <- rbind(dat4,d)
# accuracy by serial position
# data is in d2, model is in dat14
data2 <- read.table("CWM-dataExp2pos.txt",header=T)
data2$source <- "data"
dat14$source <- "model"
data2 <- rbind(data2,dat14)
linesize = 0.8
pointsize = 2.8
p1 <- ggplot(dat4, aes(x = span, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Span") +
ylim(c(0.75,0.96))
p2 <- ggplot(data2[data2$span==3,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Serial Position") +
ylim(c(0.70,1.0))
p3 <- ggplot(data2[data2$span==4,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Serial Position") +
ylim(c(0.70,1.0))
p4 <- ggplot(data2[data2$span==5,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Serial Position") +
ylim(c(0.60,1.0))
multiplot(p1,p2,p3,p4,cols=2)
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Par1 == "press",]
dat2$Trial <- ifelse(dat2$Label == "training", dat2$Trial - 10, dat2$Trial)
dat2 <- dat2[,c(1,4,8,11,12,13)]
names(dat2) <- c("run","trial","response","condition","span","position")
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))
dat20 <- aggregate(correct ~ trial * condition, data = dat2, mean)
m20 <- with(dat20,tapply(correct,list(condition,trial),mean))
quartz()
ggplot(dat20[dat20$trial>-2 & dat20$trial < 11,], aes(x = trial + 2, y = correct, group = condition, color=condition)) +    geom_line(size = 1) +
geom_point(colour="black")  +
scale_x_continuous(breaks = (1:6)*2) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Block") +
ylim(0.79,0.95)
# Thought probes
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Label != "training" & dat$Par1 == "press",]
dat2 <- dat2[,c(1,4,8,11,12,13)]
names(dat2) <- c("run","trial","response","condition","span","position")
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))
dat3 <- aggregate(correct ~ run * condition * span * trial, data = dat2, mean)
datx <- dat[dat$Label != "training",]
datx <- dat[dat$Label == "test" & (dat$Par1 == "subvocalize" | dat$Par1 == "wander" | dat$Event == "trial-end" | dat$Event == "trial-start"),]
names(datx) = c("run","task","Label","trial","time","event","Par1","Par2","Par3","Inp1","condition","span","Inp4","Inp5")
datx$prevEvent <- c("none",datx$Par1[1:length(datx$Par1)-1])
View(datx)
View(datx)
library(ggplot2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
dat <- read.table("CWM-emotion-drh.dat", as.is=T)
names(dat) <- c("Run","Task","Label","Trial","Time","Event","Par1","Par2","Par3","Inp1","Inp2","Inp3","Inp4","Inp5")
se <- function(x) sd(x)/sqrt(length(x))
library(Hmisc)
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Label != "training" & dat$Par1 == "press",]
dat2 <- dat2[,c(1,4,8,11,12,13)]
names(dat2) <- c("run","trial","response","condition","span","position")
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))
dat3 <- aggregate(correct ~ run * condition * span, data = dat2, mean)
dat3c <- aggregate(correct ~ run * condition * span, data = dat2, length)
dat3c$correct <- dat3c$correct / dat3c$span
dat3c
dat4 <- aggregate(correct ~ condition * span, data = dat3, mean)
dat4err <- aggregate(correct ~ condition * span, data = dat3, se)
names(dat4err) <- c("condition","span","se")
dat4 <- merge(dat4,dat4err)
dat13 <- aggregate(correct ~ run * condition * span * position, data = dat2[dat2$correct==1,], length)
dat13$correct <- dat13$correct / 20
dat14 <- aggregate(correct ~ condition * span * position, data = dat13, mean)
dat14err <- aggregate(correct ~ condition * span * position, data = dat13, se)
names(dat14err) <- c("condition","span","position","se")
dat14 <- merge(dat14,dat14err)
expdata <- read.table("CWM-dataExp2.txt",header=T)
d <- expdata
d$source <- "data"
dat4$se <- 0.0
dat4$source <- "model"
dat4 <- rbind(dat4,d)
# accuracy by serial position
# data is in d2, model is in dat14
data2 <- read.table("CWM-dataExp2pos.txt",header=T)
data2$source <- "data"
dat14$source <- "model"
data2 <- rbind(data2,dat14)
linesize = 0.8
pointsize = 2.8
p1 <- ggplot(dat4, aes(x = span, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Span") +
ylim(c(0.75,0.96))
p2 <- ggplot(data2[data2$span==3,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Serial Position") +
ylim(c(0.70,1.0))
p3 <- ggplot(data2[data2$span==4,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Serial Position") +
ylim(c(0.70,1.0))
p4 <- ggplot(data2[data2$span==5,], aes(x = position, y = correct, group = interaction(condition,source), color=condition, linetype=source)) +    geom_line(size = linesize) +
geom_point(colour="black")  +  theme(axis.title=element_text(size=10),
axis.text=element_text(size=9),
title=element_text(size=9,face="bold"),
legend.text=element_text(size=9),
legend.key.size=unit(0.7,"cm")) +
scale_linetype_manual(values=c("solid","dotted")) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position = "dodge", width = .15) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Serial Position") +
ylim(c(0.60,1.0))
multiplot(p1,p2,p3,p4,cols=2)
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Par1 == "press",]
dat2$Trial <- ifelse(dat2$Label == "training", dat2$Trial - 10, dat2$Trial)
dat2 <- dat2[,c(1,4,8,11,12,13)]
names(dat2) <- c("run","trial","response","condition","span","position")
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))
dat20 <- aggregate(correct ~ trial * condition, data = dat2, mean)
m20 <- with(dat20,tapply(correct,list(condition,trial),mean))
quartz()
ggplot(dat20[dat20$trial>-2 & dat20$trial < 11,], aes(x = trial + 2, y = correct, group = condition, color=condition)) +    geom_line(size = 1) +
geom_point(colour="black")  +
scale_x_continuous(breaks = (1:6)*2) +
scale_color_manual(values=c("blue","red")) +
ylab("Partial-credit score") +
xlab("Block") +
ylim(0.79,0.95)
# Thought probes
dat2 <-dat[dat$Par2 != "yes" & dat$Par2 != "no" & dat$Event != "trial-end" & dat$Label != "training" & dat$Par1 == "press",]
dat2 <- dat2[,c(1,4,8,11,12,13)]
names(dat2) <- c("run","trial","response","condition","span","position")
dat2$correct <- ifelse(dat2$response == "error" | dat2$response == "event" | dat2$response == "void", 0, 1)
dat2$position <- ifelse(dat2$response == "k", 1, ifelse(dat2$response == "p", 2, ifelse(dat2$response == "f", 3, ifelse(dat2$response == "g", 4, ifelse(dat2$response == "x", 5,8)))))
dat3 <- aggregate(correct ~ run * condition * span * trial, data = dat2, mean)
datx <- dat[dat$Label != "training",]
datx <- dat[dat$Label == "test" & (dat$Par1 == "subvocalize" | dat$Par1 == "wander" | dat$Par1 == "elaborate" | dat$Event == "trial-end" | dat$Event == "trial-start"),]
names(datx) = c("run","task","Label","trial","time","event","Par1","Par2","Par3","Inp1","condition","span","Inp4","Inp5")
datx$prevEvent <- c("none",datx$Par1[1:length(datx$Par1)-1])
View(datx)
View(datx)
View(datx)
datx <- datx[datx$event=="trial-end",]
datxy <- merge(datx,dat3)
View(datxy)
datxy$ontask <- ifelse(datxy$prevEvent != "elaborate" , 1, 0)
ontask.by.condition.run <- aggregate(ontask ~ condition * run, data = datxy, FUN = mean)
ontask.by.condition <- aggregate(ontask ~ condition, data = ontask.by.condition.run, FUN = mean)
View(ontask.by.condition)
correct.by.ontask.run <- aggregate(correct ~ ontask * run, data = datxy, FUN = mean)
correct.by.ontask <- aggregate(correct ~ ontask , data = correct.by.ontask.run, FUN = mean)
View(correct.by.ontask)
